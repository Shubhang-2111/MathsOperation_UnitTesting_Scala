[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\singh\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\singh\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 16)
[debug]       Load.loadUnit: plugins took 143.2271ms
[debug]       Load.loadUnit: defsScala took 0.4643ms
[debug] [Loading] Scanning directory C:\Users\singh\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\singh\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.6147 ms
[debug]           Load.resolveProject(global-plugins) took 62.904ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\singh\.sbt\1.0\plugins, plugins: List(<none>))) took 110.3433ms
[debug] [Loading] Done in C:\Users\singh\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 142.828ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3109ms
[debug]     Load.loadUnit(file:/C:/Users/singh/.sbt/1.0/plugins/, ...) took 298.6061ms
[debug]   Load.apply: load took 527.7392ms
[debug]   Load.apply: resolveProjects took 6.3417ms
[debug]   Load.apply: finalTransforms took 76.3341ms
[debug]   Load.apply: config.delegates took 8.4535ms
[debug]   Load.apply: Def.make(settings)... took 476.8214ms
[debug]   Load.apply: structureIndex took 137.0326ms
[debug]   Load.apply: mkStreams took 2.3688ms
[info] loading global plugins from C:\Users\singh\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5496.6313ms
[debug]           Load.loadUnit: plugins took 26.3243ms
[debug]           Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\singh\IdeaProjects\Training\project
[debug]             Load.loadUnit: mkEval took 7.7848ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\singh\IdeaProjects\Training\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3156 ms
[info] loading settings for project training-build from idea.sbt ...
[debug]               Load.resolveProject(training-build) took 3.8681ms
[debug]             Load.loadTransitive: finalizeProject(Project(id training-build, base: C:\Users\singh\IdeaProjects\Training\project, plugins: List(<none>))) took 6.8666ms
[debug] [Loading] Done in C:\Users\singh\IdeaProjects\Training\project, returning: (training-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2516.5632ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.0848ms
[debug]         Load.loadUnit(file:/C:/Users/singh/IdeaProjects/Training/project/, ...) took 2551.8721ms
[debug]       Load.apply: load took 2553.8842ms
[debug]       Load.apply: resolveProjects took 0.1418ms
[debug]       Load.apply: finalTransforms took 18.099ms
[debug]       Load.apply: config.delegates took 0.4675ms
[debug]       Load.apply: Def.make(settings)... took 142.4082ms
[debug]       Load.apply: structureIndex took 41.4885ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\singh\IdeaProjects\Training\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 8547.024ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\singh\IdeaProjects\Training
[debug]       Load.loadUnit: mkEval took 0.2702ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8724 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 27.5148ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\singh\IdeaProjects\Training, plugins: List(<none>))) took 31.1772ms
[debug] [Loading] Done in C:\Users\singh\IdeaProjects\Training, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1305.8074ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.5546ms
[debug]   Load.loadUnit(file:/C:/Users/singh/IdeaProjects/Training/, ...) took 9865.1487ms
[debug] Load.apply: load took 9866.8557ms
[debug] Load.apply: resolveProjects took 0.101ms
[debug] Load.apply: finalTransforms took 37.4747ms
[debug] Load.apply: config.delegates took 0.4962ms
[debug] Load.apply: Def.make(settings)... took 83.0863ms
[debug] Load.apply: structureIndex took 30.0739ms
[debug] Load.apply: mkStreams took 0.0023ms
[info] set current project to Training (in build file:/C:/Users/singh/IdeaProjects/Training/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53306 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53306, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Training (in build file:/C:/Users/singh/IdeaProjects/Training/)
[debug] > Exec(idea-shell, None, None)
